#Generated Form Function
function GenerateForm {
    ########################################################################
    # Code Generated By: SAPIEN Technologies PrimalForms (Community Edition) v1.0.10.0
    # Generated On: 03.05.2020 20:42
    # Generated By: Ben
    ########################################################################
    
    #region Import the Assemblies
    [reflection.assembly]::loadwithpartialname("System.Drawing") | Out-Null
    [reflection.assembly]::loadwithpartialname("System.Windows.Forms") | Out-Null
    #endregion
    
    #region Generated Form Objects
    $mainForm = New-Object System.Windows.Forms.Form
    $btn_search = New-Object System.Windows.Forms.Button
    $textBox_search = New-Object System.Windows.Forms.TextBox
    $editFileInput = New-Object System.Windows.Forms.TextBox
    $childView = New-Object System.Windows.Forms.ListView
    $parentView = New-Object System.Windows.Forms.ListView
    $comboBox_disk = New-Object System.Windows.Forms.ComboBox
    $btn_delete = New-Object System.Windows.Forms.Button
    $btn_edit = New-Object System.Windows.Forms.Button
    $comboBox_sort = New-Object System.Windows.Forms.ComboBox
    $btn_back = New-Object System.Windows.Forms.Button
    $InitialFormWindowState = New-Object System.Windows.Forms.FormWindowState
    #endregion Generated Form Objects
    $global:current_content_parentView = $Null
    $global:selected_directory = $Null
    $global:path= $Null
    $global:sort_style = $Null
    $global:search_result = $Null
    
    #----------------------------------------------
    #Generated Event Script Blocks
    #----------------------------------------------
    #Provide Custom Code for events specified in PrimalForms.
    

    # Wenn man auf ein Item in der parentView doppelt drauf klickt, geht man in das ausgesuchte Directory rein, die List Views werden upgedatet
    $handler_parentView_DoubleClick= 
    {
      $global:path = $global:path + "\" + $global:selected_directory
      loadParentView
    }
    
    
    # Lade den Content in der ersten List View, nachdem man eine Festplatte ausgesucht hat
    $parentView_load_content= 
    {
      $global:path = $comboBox_disk.SelectedItem.ToString()
      loadParentView
    }
    
    
    # Hier wird der Inhalt vom von einem selektierten Directory auf der linken Seite 
    $parentView_selected_mode= 
    {
      if($parentView.SelectedItems.Count -eq 0) 
      {
        return
      }
     $global:selected_directory = $parentView.SelectedItems.SubItems[2].Text
    $childView.Items.Clear()
    loadChildView($global:selected_directory)
    }
    


    # Nimmt die Sortierungsart entgegen
    $parentView_sort_content=
    {
      if($comboBox_disk.Text -ne ""){
        loadParentView  
      }
    }
    
    # Mit dem delete Button kann man ein File/Directory und falls vorhanden alle untergeordner gelöscht
    $handler_btn_delete_OnClick= 
    {
      Remove-Item -Path $global:path"\"$global:selected_directory -recurse
      loadParentView
    }
    
    
    # Der Edit button ändert den Namen des selektierten File
    $handler_btn_edit_OnClick= 
    {
      if($editFileInput.Text -ne ""){
      $inputString = $editFileInput.Text
      Rename-Item -Path $global:path\$global:selected_directory -NewName $global:path\$inputString
      loadParentView  
      $editFileInput.Text = ""
      }
    }
    
    # Mit dieser Methode geht man zum Parent Folder
    $handler_btn_back_OnClick= 
    {
      $global:path = $global:path + "\.."
      loadParentView
    }
    
    # Der Handler der die Suchfunktion ausführen soll, um nach einem bestimmten File zu suchen
    $handler_btn_search= 
    {
      $searchText = $textBox_search.Text
      if($searchText -ne ""){
       $global:search_result = Get-ChildItem -Path $global:path\ -Filter $searchText -Recurse -ErrorAction SilentlyContinue -Force
       loadChildView
      }
    }
    
    # Ladet alle vorhandenden Diskplatten vom Computer
    $list = [System.IO.DriveInfo]::getdrives()
     foreach($u in $list) {
        $comboBox_disk.Items.Add($u) | Out-Null
    }
    
    
    $OnLoadForm_StateCorrection=
    {#Correct the initial state of the form to prevent the .Net maximized form issue
        $mainForm.WindowState = $InitialFormWindowState
    }
    
    #----------------------------------------------
    #region Generated Form Code
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 556
    $System_Drawing_Size.Width = 976
    $mainForm.ClientSize = $System_Drawing_Size
    $mainForm.DataBindings.DefaultDataSourceUpdateMode = 0
    $mainForm.Name = "mainForm"
    $mainForm.Text = "Primal Form"
     
    # Der Search-Button
    $btn_search.DataBindings.DefaultDataSourceUpdateMode = 0
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 194
    $System_Drawing_Point.Y = 79
    $btn_search.Location = $System_Drawing_Point
    $btn_search.Name = "btn_search"
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 20
    $System_Drawing_Size.Width = 75
    $btn_search.Size = $System_Drawing_Size
    $btn_search.TabIndex = 12
    $btn_search.Text = "Search"
    $btn_search.UseVisualStyleBackColor = $True
    $btn_search.add_Click($handler_btn_search)
    
    $mainForm.Controls.Add($btn_search)
    
    
    # Das InputFeld für die Suche
    $textBox_search.DataBindings.DefaultDataSourceUpdateMode = 0
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 12
    $System_Drawing_Point.Y = 79
    $textBox_search.Location = $System_Drawing_Point
    $textBox_search.Name = "textBox_search"
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 20
    $System_Drawing_Size.Width = 176
    $textBox_search.Size = $System_Drawing_Size
    $textBox_search.TabIndex = 10
    
    $mainForm.Controls.Add($textBox_search)
    
    
    # Das Inputfeld für das bearbeiten von Directory Namen
    $editFileInput.DataBindings.DefaultDataSourceUpdateMode = 0
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 640
    $System_Drawing_Point.Y = 30
    $editFileInput.Location = $System_Drawing_Point
    $editFileInput.Name = "editFileInput"
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 20
    $System_Drawing_Size.Width = 163
    $editFileInput.Size = $System_Drawing_Size
    $editFileInput.TabIndex = 10
    
    $mainForm.Controls.Add($editFileInput)
    
    
    $childView.DataBindings.DefaultDataSourceUpdateMode = 0
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 501
    $System_Drawing_Point.Y = 105
    $childView.Location = $System_Drawing_Point
    $childView.Name = "childView"
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 450
    $System_Drawing_Size.Width = 463
    $childView.MultiSelect = $False
    $childView.Size = $System_Drawing_Size
    $childView.TabIndex = 8
    $childView.FullRowSelect = $True
    $childView.UseCompatibleStateImageBehavior = $False
    $childView.View = 3
    $childView.MultiSelect = $False
    $childView.FullRowSelect = $True
    $childView.View = "Details"
    $childView.add_SelectedIndexChanged($childView_selected_mode)
    $childView.Columns.Add("ID") | Out-Null
    $childView.Columns.Add("Type") | Out-Null
    $childView.Columns.Add("Name") | Out-Null
    $childView.Columns.Add("Date") | Out-Null
    
    $mainForm.Controls.Add($childView)
    
    
    $parentView.DataBindings.DefaultDataSourceUpdateMode = 0
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 12
    $System_Drawing_Point.Y = 105
    $parentView.Location = $System_Drawing_Point
    $parentView.Name = "parentView"
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 450
    $System_Drawing_Size.Width = 486
    $parentView.Size = $System_Drawing_Size
    $parentView.TabIndex = 6
    $parentView.FullRowSelect = $True
    $parentView.UseCompatibleStateImageBehavior = $False
    $parentView.View = "Details"
    $parentView.add_SelectedIndexChanged($parentView_selected_mode)
    $parentView.add_DoubleClick($handler_parentView_DoubleClick)
    $parentView.Columns.Add("ID") | Out-Null
    $parentView.Columns.Add("Type") | Out-Null
    $parentView.Columns.Add("Name") | Out-Null
    $parentView.Columns.Add("Date") | Out-Null
    
    $mainForm.Controls.Add($parentView)
    
    
    $comboBox_disk.DataBindings.DefaultDataSourceUpdateMode = 0
    $comboBox_disk.FormattingEnabled = $True
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 12
    $System_Drawing_Point.Y = 3
    $comboBox_disk.Location = $System_Drawing_Point
    $comboBox_disk.Name = "comboBox_disk"
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 21
    $System_Drawing_Size.Width = 192
    $comboBox_disk.Size = $System_Drawing_Size
    $comboBox_disk.TabIndex = 5
    $comboBox_disk.add_SelectedIndexChanged($parentView_load_content)
    
    $mainForm.Controls.Add($comboBox_disk)
    
    
    $btn_delete.DataBindings.DefaultDataSourceUpdateMode = 0
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 889
    $System_Drawing_Point.Y = 28
    $btn_delete.Location = $System_Drawing_Point
    $btn_delete.Name = "btn_delete"
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 23
    $System_Drawing_Size.Width = 75
    $btn_delete.Size = $System_Drawing_Size
    $btn_delete.TabIndex = 4
    $btn_delete.Text = "Delete"
    $btn_delete.UseVisualStyleBackColor = $True
    $btn_delete.add_Click($handler_btn_delete_OnClick)
    
    $mainForm.Controls.Add($btn_delete)
    
    
    $btn_edit.DataBindings.DefaultDataSourceUpdateMode = 0
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 806
    $System_Drawing_Point.Y = 28
    $btn_edit.Location = $System_Drawing_Point
    $btn_edit.Name = "btn_edit"
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 23
    $System_Drawing_Size.Width = 75
    $btn_edit.Size = $System_Drawing_Size
    $btn_edit.TabIndex = 3
    $btn_edit.Text = "Edit"
    $btn_edit.UseVisualStyleBackColor = $True
    $btn_edit.add_Click($handler_btn_edit_OnClick)
    
    $mainForm.Controls.Add($btn_edit)
    
    
    $comboBox_sort.DataBindings.DefaultDataSourceUpdateMode = 0
    $comboBox_sort.FormattingEnabled = $True
    $comboBox_sort.Items.Add("Asc") | Out-Null
    $comboBox_sort.Items.Add("Desc")| Out-Null
    $comboBox_sort.Items.Add("Latest Date") | Out-Null
    $comboBox_sort.Items.Add("Oldest Date") | Out-Null
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 95
    $System_Drawing_Point.Y = 30
    $comboBox_sort.Location = $System_Drawing_Point
    $comboBox_sort.Name = "comboBox_sort"
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 21
    $System_Drawing_Size.Width = 159
    $comboBox_sort.Size = $System_Drawing_Size
    $comboBox_sort.TabIndex = 2
    $comboBox_sort.add_SelectedIndexChanged($parentView_sort_content)
    
    $mainForm.Controls.Add($comboBox_sort)
    
    
    $btn_back.DataBindings.DefaultDataSourceUpdateMode = 0
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 12
    $System_Drawing_Point.Y = 28
    $btn_back.Location = $System_Drawing_Point
    $btn_back.Name = "btn_back"
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 23
    $System_Drawing_Size.Width = 75
    $btn_back.Size = $System_Drawing_Size
    $btn_back.TabIndex = 1
    $btn_back.Text = "Back"
    $btn_back.UseVisualStyleBackColor = $True
    $btn_back.add_Click($handler_btn_back_OnClick)
    
    $mainForm.Controls.Add($btn_back)
    
    #endregion Generated Form Code
    
    #Save the initial state of the form
    $InitialFormWindowState = $mainForm.WindowState
    #Init the OnLoad event to correct the initial state of the form
    $mainForm.add_Load($OnLoadForm_StateCorrection)
    #Show the Form
    $mainForm.ShowDialog()| Out-Null
    
    } #End Function
    
        # Ladet die Daten für die Linke Listview bzw. ParentView, diese wird immer aufgerufen, wenn sich der Content der ParentListView geändert wurde
        function loadParentView(){
          $parentView.Items.Clear()
          $childView.Items.Clear()
          $sort_style = $comboBox_sort.Text
          switch ($sort_style){
            "Asc"{
              $global:current_content_parentView = Get-ChildItem -Path $global:path | Sort-Object 
              $counter = 0
              foreach($i in $global:current_content_parentView){
                $type = isFolder($global:path + "\" + $i.Name)
                $item = new-Object System.Windows.Forms.ListViewItem($counter)
                $item.SubItems.Add($type)
                $item.SubItems.Add($i.Name)
                $item.SubItems.Add($i.LastWriteTime.ToString())
                $parentView.Items.Add($item)
                $counter++
              } 
            }
        
            "Desc"{
              $global:current_content_parentView = Get-ChildItem -Path $global:path | Sort-Object -Descending
              $counter = 0
              foreach($i in $global:current_content_parentView){
                $type = isFolder($global:path + "\" + $i.Name)
                $item = new-Object System.Windows.Forms.ListViewItem($counter)
                $item.SubItems.Add($type)
                $item.SubItems.Add($i.Name)
                $item.SubItems.Add($i.LastWriteTime.ToString())
                $parentView.Items.Add($item)
                $counter++
              } 
            }
        
            "Latest Date"{
              $global:current_content_parentView = Get-ChildItem -Path $global:path | Sort-Object @{Expression = {0 - $_.LastWriteTime}; Descending = $False}
              $counter = 0
              foreach($i in $global:current_content_parentView){
                $type = isFolder($global:path + "\" + $i.Name)
                $item = new-Object System.Windows.Forms.ListViewItem($counter)
                $item.SubItems.Add($type)
                $item.SubItems.Add($i.Name)
                $item.SubItems.Add($i.LastWriteTime.ToString())
                $parentView.Items.Add($item)
                $counter++
              }   
            }
            "Oldest Date"{
              $global:current_content_parentView = Get-ChildItem -Path $global:path | Sort-Object @{Expression = {0 - $_.LastWriteTime}; Descending = $True}
              $counter = 0
              foreach($i in $global:current_content_parentView){
                $type = isFolder($global:path + "\" + $i.Name)
                $item = new-Object System.Windows.Forms.ListViewItem($counter)
                $item.SubItems.Add($type)
                $item.SubItems.Add($i.Name)
                $item.SubItems.Add($i.LastWriteTime.ToString())
                $parentView.Items.Add($item)
                $counter++
              } 
            }
            default{
              $global:current_content_parentView = Get-ChildItem -Path $global:path
              $counter = 0
              foreach($i in $global:current_content_parentView){
                $type = isFolder($global:path + "\" + $i.Name)
                $item = new-Object System.Windows.Forms.ListViewItem($counter)
                $item.SubItems.Add($type)
                $item.SubItems.Add($i.Name)
                $item.SubItems.Add($i.LastWriteTime.ToString())
                $parentView.Items.Add($item)
                $counter++
              } 
            }
          }
          $parentView.AutoResizeColumns("HeaderSize")
        }
        
        # Ladet die Daten für die rechte Listview bzw. ChildView, diese wird immer aufgerufen, wenn sich der Content der ChildView ändert wurde
        function loadChildView($parentFile) {
          $counter = 0
          switch ($sort_style){
            "Asc"{
              $list = Get-ChildItem -Path $global:path\$parentFile | Sort-Object 
              $counter = 0
              foreach($i in $list){
                $type = isFolder($global:path + "\" + $parentFile + "\" + $i.Name)
                $item = new-Object System.Windows.Forms.ListViewItem($counter)
                $item.SubItems.Add($type)
                $item.SubItems.Add($i.Name)
                $item.SubItems.Add($i.LastWriteTime.ToString())
                $childView.Items.Add($item)
                $counter++
              } 
            }
        
            "Desc"{
              $list = Get-ChildItem -Path $global:path\$parentFile | Sort-Object -Descending
              $counter = 0
              foreach($i in $list){
                $type = isFolder($global:path + "\" + $parentFile + "\" + $i.Name)
                $item = new-Object System.Windows.Forms.ListViewItem($counter)
                $item.SubItems.Add($type)
                $item.SubItems.Add($i.Name)
                $item.SubItems.Add($i.LastWriteTime.ToString())
                $childView.Items.Add($item)
                $counter++
              } 
            }
        
            "Latest Date"{
              $list = Get-ChildItem -Path $global:path"\"$parentFile | Sort-Object @{Expression = {0 - $_.LastWriteTime}; Descending = $False}
              $counter = 0
              foreach($i in $list){
                $type = isFolder($global:path + "\" + $parentFile + "\" + $i.Name)
                $item = new-Object System.Windows.Forms.ListViewItem($counter)
                $item.SubItems.Add($type)
                $item.SubItems.Add($i.Name)
                $item.SubItems.Add($i.LastWriteTime.ToString())
                $childView.Items.Add($item)
                $counter++
              }   
            }
            "Oldest Date"{
              $list = Get-ChildItem -Path $global:path"\"$parentFile | Sort-Object @{Expression = {0 - $_.LastWriteTime}; Descending = $True}
              $counter = 0
              foreach($i in $list){
                $type = isFolder($global:path + "\" + $parentFile + "\" + $i.Name)
                $item = new-Object System.Windows.Forms.ListViewItem($counter)
                $item.SubItems.Add($type)
                $item.SubItems.Add($i.Name)
                $item.SubItems.Add($i.LastWriteTime.ToString())
                $childView.Items.Add($item)
                $counter++
              } 
            }
            default{
              $list = Get-ChildItem -Path $global:path\$parentFile
              $counter = 0
              foreach($i in $list){
                $type = isFolder($global:path + "\" + $parentFile + "\" + $i.Name)
                $item = new-Object System.Windows.Forms.ListViewItem($counter)
                $item.SubItems.Add($type)
                $item.SubItems.Add($i.Name)
                $item.SubItems.Add($i.LastWriteTime.ToString())
                $childView.Items.Add($item)
                $counter++
              } 
            }
          }
          $childView.AutoResizeColumns("HeaderSize")
        }
        
        
        function isFolder($path) {
          if((Get-Item $path) -is [System.IO.DirectoryInfo]){
            return "Directory"
          } else {
            return "File"
          }
        }
    #Call the Function
    GenerateForm
    