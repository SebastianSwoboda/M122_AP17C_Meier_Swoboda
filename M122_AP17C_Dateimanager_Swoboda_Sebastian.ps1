#Generated Form Function
function GenerateForm {
  ########################################################################
  # Code Generated By: Swoboda Technologies 
  # Generated On: 03/05/2020 21:52
  # Generated By: Sebastian
  ########################################################################
  
  #region Import the Assemblies
  [reflection.assembly]::loadwithpartialname("System.Windows.Forms") | Out-Null
  [reflection.assembly]::loadwithpartialname("System.Drawing") | Out-Null
  #endregion
  
  #region Generated Form Objects
  $form1 = New-Object System.Windows.Forms.Form
  $searchButton = New-Object System.Windows.Forms.Button
  $searchBox = New-Object System.Windows.Forms.TextBox
  $sortBySelect = New-Object System.Windows.Forms.ComboBox
  $driveSelect = New-Object System.Windows.Forms.ComboBox
  $button_delete = New-Object System.Windows.Forms.Button
  $button_edit = New-Object System.Windows.Forms.Button
  $button_back = New-Object System.Windows.Forms.Button
  $fileFolderView = New-Object System.Windows.Forms.ListView
  $InitialFormWindowState = New-Object System.Windows.Forms.FormWindowState
  $changeNameBox = New-Object System.Windows.Forms.TextBox
  #endregion Generated Form Objects

  #Global variables
  $global:selectedPath = ""

  #Helper methods

  #Is used to store all files and folders in selected path in an array
  function getFilesAndFolders() {
    return Get-ChildItem -Path "$($global:selectedPath)" | Foreach-Object { $_.Name }
  }

  #This function is used to display all Files and Folders in the selected path in the listView
  function addFilesAndFoldersToList($listOfFilesAndFolders) {
    if (-Not $listOfFilesAndFolders) {
      $listOfFilesAndFolders = getFilesAndFolders
    }
    $fileFolderView.Items.Clear()
    foreach ($item in $listOfFilesAndFolders) {
      $lastChangeTime = (Get-Item "$global:selectedPath\$item" | select -Property LastWriteTime).LastWriteTime.ToString("yyyy-MM-dd")
      $listViewItem = $fileFolderView.Items.Add("$item")
      if (checkIfFolder($item)) {
        $listViewItem.SubItems.Add("Folder")
      }
      else {
        $listViewItem.SubItems.Add("File")
      }
      $listViewItem.SubItems.Add($lastChangeTime)
      $fileFolderView.AutoResizeColumns(2)
    }
  }

  #Returns true if item in path is a folder
  function checkIfFolder($item) {
    return  (Get-Item $global:selectedPath"/$item") -is [System.IO.DirectoryInfo]
  }

  #Sorts files And folders alphabetically or by last modified date
  function sortFilesAndFolders() {
    switch ($sortBySelect.Text) {
      "alphabetically" {
        addFilesAndFoldersToList(Get-ChildItem -Path "$($global:selectedPath)" | Foreach-Object { $_.Name } | sort ) 
      }
      "date" {
        $test = Get-ChildItem -Path "$($global:selectedPath)" | sort LastWriteTime -Descending 
        addFilesAndFoldersToList($test) 
      }
      default {
        addFilesAndFoldersToList
      }
    }
  }

  #end of helper methods

  #Add available drives to select box
  foreach ($item in gdr -PSProvider 'FileSystem') { 
    $driveSelect.Items.Add($item); 
  }
  
  #----------------------------------------------
  #Generated Event Script Blocks
  #----------------------------------------------
  #Provide Custom Code for events specified in PrimalForms.

  #Will search for file/folder when search button is clicked
  $handler_searchButton_Click = {
    try {
      addFilesAndFoldersToList(Get-ChildItem -Path $global:selectedPath -Filter $searchBox.Text)
    }
    catch { 
      $searchBox.Text = "Not found"
    }
  }

  #Will load Files from selected drive and display in list view
  $handler_driveSelect_SelectedIndexChanged = 
  {
    #$global:filesInCurrentDirectory = (Get-ChildItem -Path $global:selectedDrive:\ -Force)
    if ($driveSelect.Text -notcontains "Drive Select") {
      $global:selectedPath = $driveSelect.Text + ":/"
      addFilesAndFoldersToList
    }
  }

  #If double clicked on folder it will load and display files and folders inside selected folder
  #If double clicked on file it will try and open it 
  $fileFolder_doubleClick = {
    $item = $fileFolderView.SelectedItems[0].Text
    if (checkIfFolder($item)) {
      $global:selectedPath += "/$($item)"
      sortFilesAndFolders
    }
    else {
      try {
        Invoke-Item $global:selectedPath"/$($item)"
      }
      catch {
        $searchBox.Text = "unable to open file"
      }
    }
  }
  
  #Will navigate back to parent folder when clicked
  $button_back_click = 
  { try {
      $global:selectedPath += "\.."
      sortFilesAndFolders
    }
    catch {
      $global:selectedPath = $driveSelect.Text + ":/"
      sortFilesAndFolders
    }
  
  }
  
  #Will delete selected file/folder 
  $button_delete_click = 
  {
    $itemToDelete = $fileFolderView.SelectedItems[0].Text
    $path = "$($global:selectedPath)\$($itemToDelete)"
    Remove-Item $path -recurse
    addFilesAndFoldersToList
  }
  
  #Will sort files/folders according to selection 
  $handler_sortBySelect_SelectedIndexChanged = 
  { 
    if ($sortBySelect.Text -notcontains "Sort by") {
      sortFilesAndFolders
    }
  }
  
  #Will edit name of selected file/folder when clicked 
  $button_edit_click = 
  {
    $fileToEdit = $global:selectedPath + "/" + $fileFolderView.SelectedItems[0].Text
    Rename-Item -Path $fileToEdit -NewName $changeNameBox.Text
    addFilesAndFoldersToList 
  }
  
  $OnLoadForm_StateCorrection =
  { 
    #Correct the initial state of the form to prevent the .Net maximized form issue
    $form1.WindowState = $InitialFormWindowState
  }
  
  #----------------------------------------------
  #region Generated Form Code
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Height = 495
  $System_Drawing_Size.Width = 541
  $form1.ClientSize = $System_Drawing_Size
  $form1.DataBindings.DefaultDataSourceUpdateMode = 0
  $form1.Name = "form1"
  $form1.Text = "File Manager"
  $form1.add_Load($handler_form1_Load)

  $searchButton.DataBindings.DefaultDataSourceUpdateMode = 0
  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 466
  $System_Drawing_Point.Y = 12
  $searchButton.Location = $System_Drawing_Point
  $searchButton.Name = "searchButton"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Height = 23
  $System_Drawing_Size.Width = 59
  $searchButton.Size = $System_Drawing_Size
  $searchButton.TabIndex = 10
  $searchButton.Text = "search"
  $searchButton.UseVisualStyleBackColor = $True
  $searchButton.add_Click($handler_searchButton_Click)

  $form1.Controls.Add($searchButton)

  $searchBox.DataBindings.DefaultDataSourceUpdateMode = 0
  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 277
  $System_Drawing_Point.Y = 12
  $searchBox.Location = $System_Drawing_Point
  $searchBox.Name = "searchBox"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Height = 20
  $System_Drawing_Size.Width = 183
  $searchBox.Size = $System_Drawing_Size
  $searchBox.TabIndex = 9
  $searchBox.Text = "Search"
  $searchBox.add_TextChanged($handler_searchBox_TextChanged)

  $form1.Controls.Add($searchBox)
  
  $sortBySelect.DataBindings.DefaultDataSourceUpdateMode = 0
  $sortBySelect.FormattingEnabled = $True
  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 77
  $System_Drawing_Point.Y = 39
  $sortBySelect.Location = $System_Drawing_Point
  $sortBySelect.Name = "sortBySelect"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Height = 21
  $System_Drawing_Size.Width = 121
  $sortBySelect.Size = $System_Drawing_Size
  $sortBySelect.TabIndex = 7
  $sortBySelect.add_SelectedIndexChanged($handler_sortBySelect_SelectedIndexChanged)
  $sortBySelect.Items.Add("alphabetically")
  $sortBySelect.Items.Add("date")
  $sortBySelect.Text = "Sort by"

  $form1.Controls.Add($sortBySelect)
  
  $driveSelect.DataBindings.DefaultDataSourceUpdateMode = 0
  $driveSelect.FormattingEnabled = $True
  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 12
  $System_Drawing_Point.Y = 12
  $driveSelect.Location = $System_Drawing_Point
  $driveSelect.Name = "driveSelect"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Height = 21
  $System_Drawing_Size.Width = 121
  $driveSelect.Size = $System_Drawing_Size
  $driveSelect.TabIndex = 6
  $driveSelect.add_SelectedIndexChanged($handler_driveSelect_SelectedIndexChanged)
  $driveSelect.Text = "Select Drive"

  
  $form1.Controls.Add($driveSelect)
  
  
  $button_delete.DataBindings.DefaultDataSourceUpdateMode = 0
  
  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 466
  $System_Drawing_Point.Y = 39
  $button_delete.Location = $System_Drawing_Point
  $button_delete.Name = "button_delete"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Height = 23
  $System_Drawing_Size.Width = 59
  $button_delete.Size = $System_Drawing_Size
  $button_delete.TabIndex = 5
  $button_delete.Text = "delete"
  $button_delete.UseVisualStyleBackColor = $True
  $button_delete.add_Click($button_delete_click)
  
  $form1.Controls.Add($button_delete)
  
  
  $button_edit.DataBindings.DefaultDataSourceUpdateMode = 0
  
  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 383
  $System_Drawing_Point.Y = 39
  $button_edit.Location = $System_Drawing_Point
  $button_edit.Name = "button_edit"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Height = 23
  $System_Drawing_Size.Width = 77
  $button_edit.Size = $System_Drawing_Size
  $button_edit.TabIndex = 4
  $button_edit.Text = "edit name"
  $button_edit.UseVisualStyleBackColor = $True
  $button_edit.add_Click($button_edit_click)
  
  $form1.Controls.Add($button_edit)
  
  
  $button_back.DataBindings.DefaultDataSourceUpdateMode = 0
  
  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 12
  $System_Drawing_Point.Y = 39
  $button_back.Location = $System_Drawing_Point
  $button_back.Name = "button_back"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Height = 23
  $System_Drawing_Size.Width = 59
  $button_back.Size = $System_Drawing_Size
  $button_back.TabIndex = 3
  $button_back.Text = "back"
  $button_back.UseVisualStyleBackColor = $True
  $button_back.add_Click($button_back_click)
  
  $form1.Controls.Add($button_back)
  
  
  $fileFolderView.DataBindings.DefaultDataSourceUpdateMode = 0
  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 12
  $System_Drawing_Point.Y = 68
  $fileFolderView.Location = $System_Drawing_Point
  $fileFolderView.Name = "fileFolderView"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Height = 411
  $System_Drawing_Size.Width = 513
  $fileFolderView.Size = $System_Drawing_Size
  $fileFolderView.TabIndex = 1
  $fileFolderView.UseCompatibleStateImageBehavior = $False
  $fileFolderView.View = "Details"
  $fileFolderView.FullRowSelect = $true
  $fileFolderView.add_SelectedIndexChanged($handler_listView1_SelectedIndexChanged)
  $fileFolderView.add_Click($fileFolder_click)
  $fileFolderView.Add_ItemActivate($fileFolder_doubleClick)  
  $fileFolderView.Columns.Add("File/Folder", 100)
  $fileFolderView.Columns.Add("Type", 60)
  $fileFolderView.Columns.Add("Last Changed", 100)




  $form1.Controls.Add($fileFolderView)

  $changeNameBox.DataBindings.DefaultDataSourceUpdateMode = 0
  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 277
  $System_Drawing_Point.Y = 39
  $changeNameBox.Location = $System_Drawing_Point
  $changeNameBox.Name = "changeNameBox"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Height = 20
  $System_Drawing_Size.Width = 100
  $changeNameBox.Size = $System_Drawing_Size
  $changeNameBox.TabIndex = 8
  $changeNameBox.add_TextChanged($handler_textBox1_TextChanged)
  $changeNameBox.Text = "Edit name"


  $form1.Controls.Add($changeNameBox)
  
  #endregion Generated Form Code
  
  #Save the initial state of the form
  $InitialFormWindowState = $form1.WindowState
  #Init the OnLoad event to correct the initial state of the form
  $form1.add_Load($OnLoadForm_StateCorrection)
  #Show the Form
  $form1.ShowDialog() | Out-Null
  
} #End Function
  
#Call the Function
GenerateForm
  